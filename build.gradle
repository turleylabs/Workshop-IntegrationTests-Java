plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.json', name: 'json', version: '20200518'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    testImplementation 'org.apache.logging.log4j:log4j-api:2.6.1'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.6.1'
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.0"
    testImplementation "org.mockito:mockito-inline:3.12.4"
    testImplementation "org.mockito:mockito-core:3.12.4"
    testImplementation files('lib/junit5-reporting-1.0.jar')
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    testLogging {
        events "passed", "failed"
        showCauses true
        showExceptions true
        showStackTraces true
        exceptionFormat "full"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}
